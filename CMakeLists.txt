PROJECT(gformat)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

FIND_PACKAGE(Boost REQUIRED COMPONENTS log)
IF(NOT Boost_FOUND)
    MESSAGE("Can not find Boost")
ENDIF()
MESSAGE(STATUS "Found Boost IncPath ${Boost_INCLUDE_DIRS}")
MESSAGE(STATUS "Found Boost LibPath ${Boost_LIBRARY_DIRS}")
MESSAGE(STATUS "Found Boost LIBRARIES ${Boost_LIBRARIES}")

ADD_DEFINITIONS(-DBOOST_SPIRIT_THREADSAFE)
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
ADD_DEFINITIONS(-D_DEBUG)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -std=c++17 -fno-strict-aliasing -Wno-register")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++17 -fno-strict-aliasing -Wno-register")
SET(CMAKE_BUILD_TYPE "Release")

INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/common/util/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_BINARY_DIR}")

IF (NOT TARGET common)
    ADD_SUBDIRECTORY(common)
ENDIF()


SET(SRCS
"${PROJECT_SOURCE_DIR}/src/checksum.cpp" 
"${PROJECT_SOURCE_DIR}/src/pack_header.cpp" 
)

SET(TEST_SRCS
"${PROJECT_SOURCE_DIR}/test/main.cpp" 
)

ADD_LIBRARY(gformat STATIC ${SRCS})

ADD_EXECUTABLE(gformat_test ${TEST_SRCS})
TARGET_LINK_LIBRARIES(gformat_test gformat common boost_log-mt)
